import asyncio
import discord
import yt_dlp
import os
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from dotenv import load_dotenv

# üîë –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!!! üîë
load_dotenv()

# üéµ –ù–ê–°–¢–†–û–ô–ö–ê SPOTIFY API - –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ï–ô–õ–ò–°–¢–ê–ú–ò SPOTIFY!!! üéµ
SPOTIFY_CLIENT_ID = os.getenv('SPOTIFY_CLIENT_ID')
SPOTIFY_CLIENT_SECRET = os.getenv('SPOTIFY_CLIENT_SECRET')

# üìª –ù–ê–°–¢–†–û–ô–ö–ò –†–ê–î–ò–û –ò–ó .ENV - –ú–û–ñ–ù–û –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ò–¢–¨, –ù–û –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø!!! üìª
RADIO_STREAM_URL = os.getenv('RADIO_STREAM_URL', 'https://rusradio.hostingradio.ru/rusradio96.aacp')
RADIO_NAME = os.getenv('RADIO_NAME', '–†—É—Å—Å–∫–æ–µ –†–∞–¥–∏–æ')
RADIO_THUMBNAIL = os.getenv('RADIO_THUMBNAIL', 'https://rusradio.ru/design/images/share.jpg')

# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø YT-DLP - –ù–ï –¢–†–û–ì–ê–ô, –ï–°–õ–ò –ù–ï –•–û–ß–ï–®–¨ –ü–û–õ–û–ú–ê–¢–¨!!! ‚öôÔ∏è
YTDL_OPTIONS = {
    'format': 'bestaudio/best',  # üéß –°–ê–ú–û–ï –õ–£–ß–®–ï–ï –ö–ê–ß–ï–°–¢–í–û –ó–í–£–ö–ê!!! üéß
    'extractaudio': True,       # üîà –ò–ó–í–õ–ï–ö–ê–ï–ú –¢–û–õ–¨–ö–û –ê–£–î–ò–û!!! üîà
    'audioformat': 'mp3',       # üéµ –§–û–†–ú–ê–¢ MP3 - –°–ê–ú–´–ô –°–û–í–ú–ï–°–¢–ò–ú–´–ô!!! üéµ
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',  # üìù –®–ê–ë–õ–û–ù –ò–ú–ï–ù–ò –§–ê–ô–õ–ê!!! üìù
    'restrictfilenames': True,  # üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–• –°–ò–ú–í–û–õ–û–í –í –ò–ú–ï–ù–ê–•!!! üõ°Ô∏è
    'noplaylist': True,         # ‚ùå –ù–ï –ó–ê–ì–†–£–ñ–ê–ï–ú –ü–õ–ï–ô–õ–ò–°–¢–´ –¶–ï–õ–ò–ö–û–ú!!! ‚ùå
    'nocheckcertificate': True, # üîì –ù–ï –ü–†–û–í–ï–†–Ø–ï–ú –°–ï–†–¢–ò–§–ò–ö–ê–¢–´ (–ò–ù–ê–ß–ï –ú–û–ñ–ï–¢ –ù–ï –†–ê–ë–û–¢–ê–¢–¨)!!! üîì
    'ignoreerrors': False,      # ‚ö†Ô∏è –ù–ï –ò–ì–ù–û–†–ò–†–£–ï–ú –û–®–ò–ë–ö–ò - –¢–ê–ö –ë–ï–ó–û–ü–ê–°–ù–ï–ï!!! ‚ö†Ô∏è
    'logtostderr': False,       # üîá –ù–ï –í–´–í–û–î–ò–ú –õ–û–ì–ò –í –ö–û–ù–°–û–õ–¨ - –û–ù–ò –ó–ê–°–û–†–Ø–Æ–¢ –ï–ï!!! üîá
    'quiet': True,              # ü§´ –¢–ò–•–ò–ô –†–ï–ñ–ò–ú - –ë–ï–ó –õ–ò–®–ù–ò–• –°–û–û–ë–©–ï–ù–ò–ô!!! ü§´
    'no_warnings': True,        # üö´ –ë–ï–ó –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ô - –ú–ï–ù–¨–®–ï –®–£–ú–ê!!! üö´
    'default_search': 'auto',   # üîç –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö - –£–î–û–ë–ù–û!!! üîç
    'source_address': '0.0.0.0',  # üåê –°–õ–£–®–ê–ï–ú –í–°–ï –°–ï–¢–ï–í–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´!!! üåê
}

# üõ†Ô∏è –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø FFMPEG - –î–õ–Ø –ò–î–ï–ê–õ–¨–ù–û–ì–û –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø!!! üõ†Ô∏è
FFMPEG_OPTIONS = {
    'before_options': '-reconnect 1 -reconnect_streamed 1 -reconnect_delay_max 5',  # üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï!!! üîÑ
    'options': '-vn',  # üì∫ –£–î–ê–õ–Ø–ï–ú –í–ò–î–ï–û–ü–û–¢–û–ö - –ù–ê–ú –ù–£–ñ–ï–ù –¢–û–õ–¨–ö–û –ó–í–£–ö!!! üì∫
}

class MusicPlayer:
    def __init__(self, bot, guild_id):
        self.bot = bot
        self.guild_id = guild_id
        self.voice_channel_id = None
        self.text_channel_id = None
        self.voice_client = None
        self.current_track = None
        self.queue = []
        self.ytdl = yt_dlp.YoutubeDL(YTDL_OPTIONS)
        self.is_playing = False
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 5
        self.is_paused = False
        self.skip_votes = set()  # üó≥Ô∏è –ú–ù–û–ñ–ï–°–¢–í–û ID –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô, –ü–†–û–ì–û–õ–û–°–û–í–ê–í–®–ò–• –ó–ê –ü–†–û–ü–£–°–ö!!! üó≥Ô∏è
        self.votes_required = 3  # üî¢ –ö–û–õ–ò–ß–ï–°–¢–í–û –ì–û–õ–û–°–û–í, –ù–ï–û–ë–•–û–î–ò–ú–û–ï –î–õ–Ø –ü–†–û–ü–£–°–ö–ê!!! –î–ï–ú–û–ö–†–ê–¢–ò–Ø!!! üî¢
        
        # üéµ –ù–ê–°–¢–†–û–ô–ö–ê SPOTIFY –ö–õ–ò–ï–ù–¢–ê - –î–õ–Ø –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø –° SPOTIFY!!! üéµ
        if SPOTIFY_CLIENT_ID and SPOTIFY_CLIENT_SECRET:
            self.sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
                client_id=SPOTIFY_CLIENT_ID,
                client_secret=SPOTIFY_CLIENT_SECRET
            ))
        else:
            self.sp = None
    
    async def connect(self):
        """üîå –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ì–û–õ–û–°–û–í–û–ú–£ –ö–ê–ù–ê–õ–£ - –ü–ï–†–í–´–ô –®–ê–ì –ö –ò–î–ï–ê–õ–¨–ù–û–ô –ú–£–ó–´–ö–ï!!! üîå"""
        try:
            # üîç –ü–†–û–í–ï–†–Ø–ï–ú, –£–ö–ê–ó–ê–ù –õ–ò ID –ì–û–õ–û–°–û–í–û–ì–û –ö–ê–ù–ê–õ–ê!!! üîç
            if not self.voice_channel_id:
                print(f"‚ùå –û–®–ò–ë–ö–ê: ID –ì–û–õ–û–°–û–í–û–ì–û –ö–ê–ù–ê–õ–ê –ù–ï –£–ö–ê–ó–ê–ù –î–õ–Ø –°–ï–†–í–ï–†–ê {self.guild_id}!!! ‚ùå")
                return False
                
            channel = self.bot.get_channel(self.voice_channel_id)
            if not channel:
                guild = self.bot.get_guild(self.guild_id)
                if guild:
                    channel = guild.get_channel(self.voice_channel_id)
            
            if not channel:
                raise ValueError(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–ô–¢–ò –ì–û–õ–û–°–û–í–û–ô –ö–ê–ù–ê–õ –° ID {self.voice_channel_id}!!! –ö–ê–¢–ê–°–¢–†–û–§–ê!!! ‚ùå")
            
            if self.voice_client and self.voice_client.is_connected():
                await self.voice_client.move_to(channel)
            else:
                self.voice_client = await channel.connect()
            
            self.reconnect_attempts = 0
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –ü–†–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò –ö –ì–û–õ–û–°–û–í–û–ú–£ –ö–ê–ù–ê–õ–£: {e}!!! –°–†–û–ß–ù–û –ò–°–ü–†–ê–í–¨!!! ‚ö†Ô∏è")
            return False
    
    async def disconnect(self):
        """üîå –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –û–¢ –ì–û–õ–û–°–û–í–û–ì–û –ö–ê–ù–ê–õ–ê - –ü–†–û–©–ê–ï–ú–°–Ø –ö–†–ê–°–ò–í–û!!! üîå"""
        if self.voice_client and self.voice_client.is_connected():
            await self.voice_client.disconnect()
            self.voice_client = None
    
    async def play_default_radio(self):
        """üìª –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –†–ê–î–ò–û –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ - –õ–£–ß–®–ê–Ø –ú–£–ó–´–ö–ê –ë–ï–ó –ü–†–û–ë–õ–ï–ú!!! üìª"""
        if not self.voice_client or not self.voice_client.is_connected():
            success = await self.connect()
            if not success:
                return False
        
        try:
            self.current_track = {
                'title': RADIO_NAME,
                'url': RADIO_STREAM_URL,
                'thumbnail': RADIO_THUMBNAIL,
                'source': 'stream'
            }
            
            # üóëÔ∏è –°–ë–†–ê–°–´–í–ê–ï–ú –ì–û–õ–û–°–ê –ü–†–ò –í–û–ó–í–†–ê–¢–ï –ö –†–ê–î–ò–û!!! üóëÔ∏è
            self.skip_votes.clear()
            
            source = discord.FFmpegPCMAudio(RADIO_STREAM_URL, **FFMPEG_OPTIONS)
            self.voice_client.play(source, after=self._play_next_or_radio)
            self.is_playing = True
            self.is_paused = False
            
            # üì® –û–¢–ü–†–ê–í–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –¢–ï–ö–£–©–ï–ú –¢–†–ï–ö–ï!!! üì®
            await self.send_now_playing_embed()
            return True
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ò –†–ê–î–ò–û: {e}!!! –ù–ï –ü–ê–ù–ò–ö–£–ô, –°–ï–ô–ß–ê–° –ü–û–ß–ò–ù–ò–ú!!! ‚ùå")
            self.reconnect_attempts += 1
            if self.reconnect_attempts < self.max_reconnect_attempts:
                await asyncio.sleep(2)
                return await self.play_default_radio()
            return False
    
    def _play_next_or_radio(self, error=None):
        """üîÑ CALLBACK –î–õ–Ø –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø –°–õ–ï–î–£–Æ–©–ï–ì–û –¢–†–ï–ö–ê –ò–õ–ò –í–û–ó–í–†–ê–¢–ê –ö –†–ê–î–ò–û!!! üîÑ"""
        if error:
            print(f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø: {error}!!! –ù–û –ú–´ –ù–ï –°–î–ê–ï–ú–°–Ø!!! ‚ö†Ô∏è")
            self.reconnect_attempts += 1
            if self.reconnect_attempts >= self.max_reconnect_attempts:
                print("‚ùå –ü–†–ï–í–´–®–ï–ù–û –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–ü–´–¢–û–ö –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø!!! –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û!!! ‚ùå")
                return
            
            # üîÑ –ü–û–ü–´–¢–ö–ê –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ò –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø!!! üîÑ
            asyncio.run_coroutine_threadsafe(self._handle_playback_error(), self.bot.loop)
            return
        
        self.is_playing = False
        
        if self.queue:
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            next_track = self.queue.pop(0)
            asyncio.run_coroutine_threadsafe(self.play_track(next_track), self.bot.loop)
        else:
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–∞–¥–∏–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            asyncio.run_coroutine_threadsafe(self.play_default_radio(), self.bot.loop)
    
    async def _handle_playback_error(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
            await self.disconnect()
            await asyncio.sleep(2)
            success = await self.connect()
            
            if success:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                if self.current_track:
                    if self.current_track['source'] == 'stream':
                        await self.play_default_radio()
                    else:
                        await self.play_track(self.current_track)
                else:
                    await self.play_default_radio()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
    
    async def play_track(self, track_info):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞"""
        if not self.voice_client or not self.voice_client.is_connected():
            success = await self.connect()
            if not success:
                return False
        
        try:
            self.current_track = track_info
            
            if self.voice_client.is_playing():
                self.voice_client.stop()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–∫–∞
            self.skip_votes.clear()
            
            source = discord.FFmpegPCMAudio(track_info['url'], **FFMPEG_OPTIONS)
            self.voice_client.play(source, after=self._play_next_or_radio)
            self.is_playing = True
            self.is_paused = False
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
            await self.send_now_playing_embed()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
            return False
    
    async def add_to_queue(self, query):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å Spotify URL
            if 'spotify.com' in query:
                if not self.sp:
                    return False, "Spotify API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Spotify."
                
                track_info = await self._get_spotify_track_info(query)
                if not track_info:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ Spotify."
                
                # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –Ω–∞ YouTube –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                search_query = f"{track_info['title']} {track_info['artist']}"
                youtube_info = await self._get_youtube_track_info(search_query)
                
                if not youtube_info:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ YouTube."
                
                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                track_info.update({
                    'url': youtube_info['url'],
                    'source': 'youtube'
                })
                
                self.queue.append(track_info)
                
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if not self.is_playing:
                    await self.play_track(self.queue.pop(0))
                
                return True, f"–¢—Ä–µ–∫ {track_info['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å."
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (YouTube, –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –∏ —Ç.–¥.)
                track_info = await self._get_youtube_track_info(query)
                
                if not track_info:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫."
                
                self.queue.append(track_info)
                
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if not self.is_playing:
                    await self.play_track(self.queue.pop(0))
                
                return True, f"–¢—Ä–µ–∫ {track_info['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å."
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
    
    async def _get_spotify_track_info(self, spotify_url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ Spotify"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç—Ä–µ–∫–∞ –∏–∑ URL
            if 'track' in spotify_url:
                track_id = spotify_url.split('track/')[1].split('?')[0]
                track = self.sp.track(track_id)
                
                return {
                    'title': track['name'],
                    'artist': track['artists'][0]['name'],
                    'thumbnail': track['album']['images'][0]['url'] if track['album']['images'] else None,
                    'source': 'spotify'
                }
            return None
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ Spotify: {e}")
            return None
    
    async def _get_youtube_track_info(self, query):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ —Å YouTube"""
        try:
            loop = asyncio.get_event_loop()
            data = await loop.run_in_executor(None, lambda: self.ytdl.extract_info(query, download=False))
            
            if 'entries' in data:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
                data = data['entries'][0]
            
            return {
                'title': data['title'],
                'url': data['url'],
                'thumbnail': data['thumbnail'] if 'thumbnail' in data else None,
                'source': 'youtube'
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ —Å YouTube: {e}")
            return None
    
    async def skip(self):
        """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
        if self.voice_client and self.voice_client.is_playing():
            self.voice_client.stop()
            return True
        return False
    
    async def vote_skip(self, user_id):
        """–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞"""
        if not self.is_playing:
            return False, "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id in self.skip_votes:
            return False, "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞."
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞
        self.skip_votes.add(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ (–Ω–µ —Å—á–∏—Ç–∞—è –±–æ—Ç–æ–≤)
        guild = self.bot.get_guild(self.guild_id)
        if not guild:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ."
        
        voice_channel = guild.get_channel(self.voice_channel_id)
        if not voice_channel:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ."
        
        members_count = sum(1 for member in voice_channel.members if not member.bot)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ (–ø–æ–ª–æ–≤–∏–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö, –º–∏–Ω–∏–º—É–º 2)
        required_votes = max(2, members_count // 2)
        
        current_votes = len(self.skip_votes)
        
        if current_votes >= required_votes:
            # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            self.skip_votes.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
            success = await self.skip()
            return success, "–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è."
        else:
            # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤
            return False, f"–ì–æ–ª–æ—Å —É—á—Ç—ë–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â—ë {required_votes - current_votes} –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∞ ({current_votes}/{required_votes})."
    
    async def pause(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if self.voice_client and self.voice_client.is_playing():
            self.voice_client.pause()
            self.is_paused = True
            return True
        return False
    
    async def resume(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if self.voice_client and self.is_paused:
            self.voice_client.resume()
            self.is_paused = False
            return True
        return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏"""
        if self.voice_client and self.voice_client.is_connected():
            if self.voice_client.is_playing():
                self.voice_client.stop()
            self.queue = []
            self.is_playing = False
            self.is_paused = False
            self.skip_votes.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            return True
        return False
    
    async def send_now_playing_embed(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–±–µ–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ"""
        if not self.current_track:
            return
        
        text_channel = self.bot.get_channel(self.text_channel_id)
        if not text_channel:
            return
        
        embed = discord.Embed(
            title="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
            description=self.current_track['title'],
            color=discord.Color.blue()
        )
        
        if 'thumbnail' in self.current_track and self.current_track['thumbnail']:
            embed.set_thumbnail(url=self.current_track['thumbnail'])
        
        if 'artist' in self.current_track:
            embed.add_field(name="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", value=self.current_track['artist'], inline=True)
        
        source_name = "–†–∞–¥–∏–æ"
        if self.current_track['source'] == 'youtube':
            source_name = "YouTube"
        elif self.current_track['source'] == 'spotify':
            source_name = "Spotify"
        
        embed.add_field(name="–ò—Å—Ç–æ—á–Ω–∏–∫", value=source_name, inline=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        view = MusicControlView(self)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –µ–≥–æ
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            pins = await text_channel.pins()
            for pin in pins:
                if pin.author == self.bot.user and "–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç" in pin.content:
                    await pin.unpin()
                    await pin.delete()
            
            message = await text_channel.send(embed=embed, view=view)
            await message.pin()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —ç–º–±–µ–¥–∞: {e}")
            await text_channel.send(embed=embed, view=view)

class MusicControlView(discord.ui.View):
    def __init__(self, player):
        super().__init__(timeout=None)
        self.player = player
    
    @discord.ui.button(label="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", style=discord.ButtonStyle.primary)
    async def skip_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        success, message = await self.player.vote_skip(interaction.user.id)
        await interaction.response.send_message(message, ephemeral=True)
    
    @discord.ui.button(label="‚èπÔ∏è –°—Ç–æ–ø", style=discord.ButtonStyle.danger)
    async def stop_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.player.stop()
        await self.player.play_default_radio()
        await interaction.response.send_message(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –∫ {RADIO_NAME}.", ephemeral=True)
    
    @discord.ui.button(label="‚èØÔ∏è –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def pause_resume_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.player.is_paused:
            success = await self.player.resume()
            if success:
                await interaction.response.send_message("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.", ephemeral=True)
            else:
                await interaction.response.send_message("–ù–µ—á–µ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª—è—Ç—å.", ephemeral=True)
        else:
            success = await self.player.pause()
            if success:
                await interaction.response.send_message("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", ephemeral=True)
            else:
                await interaction.response.send_message("–ù–µ—á–µ–≥–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å.", ephemeral=True)
    
    @discord.ui.button(label="üéµ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", style=discord.ButtonStyle.success)
    async def add_track_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
        modal = AddTrackModal(self.player)
        await interaction.response.send_modal(modal)

class AddTrackModal(discord.ui.Modal, title="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫"):
    def __init__(self, player):
        super().__init__()
        self.player = player
    
    track_input = discord.ui.TextInput(
        label="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Spotify –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
        required=True,
        max_length=200
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        query = self.track_input.value
        success, message = await self.player.add_to_queue(query)
        
        if success:
            await interaction.response.send_message(message, ephemeral=True)
        else:
            await interaction.response.send_message(f"–û—à–∏–±–∫–∞: {message}", ephemeral=True) 