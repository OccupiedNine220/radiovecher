import asyncio
import discord
import wavelink
import os
import pkg_resources
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from dotenv import load_dotenv
from typing import Optional, Dict, List, Union, Set

# üîë –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û!!! üîë
load_dotenv()

# üéµ –ù–ê–°–¢–†–û–ô–ö–ê SPOTIFY API - –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ï–ô–õ–ò–°–¢–ê–ú–ò SPOTIFY!!! üéµ
SPOTIFY_CLIENT_ID = os.getenv('SPOTIFY_CLIENT_ID')
SPOTIFY_CLIENT_SECRET = os.getenv('SPOTIFY_CLIENT_SECRET')

# üìª –ù–ê–°–¢–†–û–ô–ö–ò –†–ê–î–ò–û –ò–ó .ENV - –ù–ê–°–¢–†–û–ô –ö–ê–ö –•–û–ß–ï–®–¨!!! üìª
RADIO_STREAM_URL = os.getenv('RADIO_STREAM_URL', 'https://rusradio.hostingradio.ru/rusradio96.aacp')
RADIO_NAME = os.getenv('RADIO_NAME', '–†—É—Å—Å–∫–æ–µ –†–∞–¥–∏–æ')
RADIO_THUMBNAIL = os.getenv('RADIO_THUMBNAIL', 'https://rusradio.ru/design/images/share.jpg')

# ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò LAVALINK - –¢–û–ù–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–†–í–ï–†–ê!!! ‚öôÔ∏è
LAVALINK_HOST = os.getenv('LAVALINK_HOST', 'localhost')
LAVALINK_PORT = int(os.getenv('LAVALINK_PORT', 2333))
LAVALINK_PASSWORD = os.getenv('LAVALINK_PASSWORD', 'youshallnotpass')
LAVALINK_SECURE = os.getenv('LAVALINK_SECURE', 'false').lower() == 'true'

# üîÑ –ù–ê–°–¢–†–û–ô–ö–ò –í–°–¢–†–û–ï–ù–ù–û–ì–û LAVALINK - –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ì–û –£–î–û–ë–°–¢–í–ê!!! üîÑ
USE_INTERNAL_LAVALINK = os.getenv('USE_INTERNAL_LAVALINK', 'true').lower() == 'true'
LAVALINK_JAR_PATH = os.getenv('LAVALINK_JAR_PATH', './Lavalink.jar')
LAVALINK_DOWNLOAD_URL = os.getenv('LAVALINK_DOWNLOAD_URL', 'https://github.com/lavalink-devs/Lavalink/releases/download/3.7.8/Lavalink.jar')

# üîç –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –í–ï–†–°–ò–ò WAVELINK - –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò!!! üîç
try:
    WAVELINK_VERSION = pkg_resources.get_distribution("wavelink").version
    WAVELINK_MAJOR = int(WAVELINK_VERSION.split('.')[0])
    print(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–µ—Ä—Å–∏—è Wavelink: {WAVELINK_VERSION} (Major: {WAVELINK_MAJOR})")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ Wavelink: {e}")
    WAVELINK_MAJOR = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –≤–µ—Ä—Å–∏—é 1.x

class LavalinkPlayer:
    def __init__(self, bot, guild_id):
        self.bot = bot
        self.guild_id = guild_id
        self.voice_channel_id = None
        self.text_channel_id = None
        self.player = None
        self.current_track = None
        self.queue = []
        self.is_playing = False
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 5
        self.is_paused = False
        self.skip_votes = set()  # üó≥Ô∏è –ú–ù–û–ñ–ï–°–¢–í–û ID –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô, –ü–†–û–ì–û–õ–û–°–û–í–ê–í–®–ò–• –ó–ê –ü–†–û–ü–£–°–ö!!! üó≥Ô∏è
        self.votes_required = 3  # üî¢ –ö–û–õ–ò–ß–ï–°–¢–í–û –ì–û–õ–û–°–û–í, –ù–ï–û–ë–•–û–î–ò–ú–û–ï –î–õ–Ø –ü–†–û–ü–£–°–ö–ê!!! –î–ï–ú–û–ö–†–ê–¢–ò–Ø!!! üî¢
        
        # üéµ –ù–ê–°–¢–†–û–ô–ö–ê SPOTIFY –ö–õ–ò–ï–ù–¢–ê - –î–õ–Ø –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–Ø –° SPOTIFY!!! üéµ
        if SPOTIFY_CLIENT_ID and SPOTIFY_CLIENT_SECRET:
            self.sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials(
                client_id=SPOTIFY_CLIENT_ID,
                client_secret=SPOTIFY_CLIENT_SECRET
            ))
        else:
            self.sp = None
    
    async def connect(self):
        """üîå –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö –ì–û–õ–û–°–û–í–û–ú–£ –ö–ê–ù–ê–õ–£ - –ü–ï–†–í–´–ô –®–ê–ì –ö –ò–î–ï–ê–õ–¨–ù–û–ô –ú–£–ó–´–ö–ï!!! üîå"""
        try:
            # üîç –ü–†–û–í–ï–†–Ø–ï–ú, –£–ö–ê–ó–ê–ù –õ–ò ID –ì–û–õ–û–°–û–í–û–ì–û –ö–ê–ù–ê–õ–ê!!! üîç
            if not self.voice_channel_id:
                print(f"‚ùå –û–®–ò–ë–ö–ê: ID –ì–û–õ–û–°–û–í–û–ì–û –ö–ê–ù–ê–õ–ê –ù–ï –£–ö–ê–ó–ê–ù –î–õ–Ø –°–ï–†–í–ï–†–ê {self.guild_id}!!! ‚ùå")
                return False
                
            channel = self.bot.get_channel(self.voice_channel_id)
            if not channel:
                guild = self.bot.get_guild(self.guild_id)
                if guild:
                    channel = guild.get_channel(self.voice_channel_id)
            
            if not channel:
                raise ValueError(f"‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–ô–¢–ò –ì–û–õ–û–°–û–í–û–ô –ö–ê–ù–ê–õ –° ID {self.voice_channel_id}!!! –ö–ê–¢–ê–°–¢–†–û–§–ê!!! ‚ùå")
            
            # üéµ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ß–ï–†–ï–ó WAVELINK –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –í–ï–†–°–ò–ò!!! üéµ
            if WAVELINK_MAJOR >= 3:
                # Wavelink 3.x
                self.player = await channel.connect(cls=wavelink.Player)
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è 3.x
                if hasattr(self.player, 'set_volume'):
                    await self.player.set_volume(50)
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Wavelink 3.x
                self.bot.add_listener(self._on_wavelink_track_end, 'on_wavelink_track_end')
                print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π on_wavelink_track_end –¥–ª—è Wavelink 3.x")
                
            elif WAVELINK_MAJOR >= 2:
                # Wavelink 2.x
                self.player = await channel.connect(cls=wavelink.Player)
                if hasattr(wavelink, 'AutoPlayMode'):
                    self.player.autoplay = wavelink.AutoPlayMode.disabled
                self.player.queue.callback = self._on_track_end
            else:
                # Wavelink 1.x
                self.player = await channel.connect(cls=wavelink.Player)
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Wavelink 1.x
                self.player.set_volume(50)
            
            self.reconnect_attempts = 0
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –ü–†–ò –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò –ö –ì–û–õ–û–°–û–í–û–ú–£ –ö–ê–ù–ê–õ–£: {e}!!! –°–†–û–ß–ù–û –ò–°–ü–†–ê–í–¨!!! ‚ö†Ô∏è")
            return False
    
    async def disconnect(self):
        """üîå –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –û–¢ –ì–û–õ–û–°–û–í–û–ì–û –ö–ê–ù–ê–õ–ê - –ü–†–û–©–ê–ï–ú–°–Ø –ö–†–ê–°–ò–í–û!!! üîå"""
        if self.player:
            try:
                if hasattr(self.player, 'is_connected') and callable(self.player.is_connected) and self.player.is_connected():
                    await self.player.disconnect()
                elif hasattr(self.player, 'disconnect') and callable(self.player.disconnect):
                    await self.player.disconnect()
                self.player = None
            except Exception as e:
                print(f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –ü–†–ò –û–¢–ö–õ–Æ–ß–ï–ù–ò–ò –û–¢ –ì–û–õ–û–°–û–í–û–ì–û –ö–ê–ù–ê–õ–ê: {e}!!! ‚ö†Ô∏è")
    
    async def play_default_radio(self):
        """üìª –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ï –†–ê–î–ò–û –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ - –õ–£–ß–®–ê–Ø –ú–£–ó–´–ö–ê –ë–ï–ó –ü–†–û–ë–õ–ï–ú!!! üìª"""
        if not self.player:
            success = await self.connect()
            if not success:
                return False
        
        try:
            self.current_track = {
                'title': RADIO_NAME,
                'url': RADIO_STREAM_URL,
                'thumbnail': RADIO_THUMBNAIL,
                'source': 'stream'
            }
            
            # üóëÔ∏è –°–ë–†–ê–°–´–í–ê–ï–ú –ì–û–õ–û–°–ê –ü–†–ò –í–û–ó–í–†–ê–¢–ï –ö –†–ê–î–ò–û!!! üóëÔ∏è
            self.skip_votes.clear()
            
            # üéµ –í–û–°–ü–†–û–ò–ó–í–û–î–ò–ú –ü–û–¢–û–ö –ß–ï–†–ï–ó LAVALINK –í –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–¢ –í–ï–†–°–ò–ò!!! üéµ
            if WAVELINK_MAJOR >= 3:
                # Wavelink 3.x
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π API Wavelink 3.x
                    tracks = await wavelink.Playable.search(RADIO_STREAM_URL)
                    if not tracks:
                        print("‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–ô–¢–ò –¢–†–ï–ö –î–õ–Ø –†–ê–î–ò–û!!! ‚ö†Ô∏è")
                        return False
                        
                    if isinstance(tracks, wavelink.Playlist):
                        track = tracks.tracks[0]
                    elif isinstance(tracks, list) and tracks:
                        track = tracks[0]
                    else:
                        track = tracks

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –¥–ª—è Wavelink 3.x
                    await self.player.play(track)
                    print(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–¥–∏–æ —á–µ—Ä–µ–∑ Wavelink 3.x: {RADIO_NAME}")
                except Exception as e:
                    print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ò –ß–ï–†–ï–ó WAVELINK 3.x: {e}!!! ‚ùå")
                    return False
            elif WAVELINK_MAJOR >= 2:
                # Wavelink 2.x
                try:
                    tracks = await wavelink.Playable.search(RADIO_STREAM_URL)
                    if isinstance(tracks, wavelink.Playlist):
                        track = tracks.tracks[0]
                    elif isinstance(tracks, list) and tracks:
                        track = tracks[0]
                    else:
                        track = tracks
                    
                    await self.player.play(track)
                except AttributeError:
                    # Fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–¥–≤–µ—Ä—Å–∏–π Wavelink 2.x
                    tracks = await wavelink.YouTubeTrack.search(RADIO_STREAM_URL)
                    if tracks:
                        track = tracks[0]
                        await self.player.play(track)
                    else:
                        print("‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–ô–¢–ò –¢–†–ï–ö!!! ‚ö†Ô∏è")
                        return False
            else:
                # Wavelink 1.x
                try:
                    tracks = await wavelink.NodePool.get_node().get_tracks(wavelink.TrackType.search, RADIO_STREAM_URL)
                    if tracks:
                        track = tracks[0]
                        await self.player.play(track)
                    else:
                        print("‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–ô–¢–ò –¢–†–ï–ö!!! ‚ö†Ô∏è")
                        return False
                except Exception as e:
                    print(f"‚ö†Ô∏è –û–®–ò–ë–ö–ê –ü–†–ò –ü–û–ò–°–ö–ï –¢–†–ï–ö–ê: {e}!!! ‚ö†Ô∏è")
                    # –ï—â–µ –æ–¥–∏–Ω fallback –¥–ª—è Wavelink 1.x
                    try:
                        tracks = await self.bot.wavelink_node.get_tracks(RADIO_STREAM_URL)
                        if tracks:
                            track = tracks[0]
                            await self.player.play(track)
                        else:
                            print("‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–ô–¢–ò –¢–†–ï–ö!!! ‚ö†Ô∏è")
                            return False
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ü–û–ò–°–ö–ï –¢–†–ï–ö–ê: {e}!!! ‚ö†Ô∏è")
                        return False
            
            self.is_playing = True
            self.is_paused = False
            
            # üì® –û–¢–ü–†–ê–í–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –¢–ï–ö–£–©–ï–ú –¢–†–ï–ö–ï!!! üì®
            await self.send_now_playing_embed()
            return True
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–û–°–ü–†–û–ò–ó–í–ï–î–ï–ù–ò–ò –†–ê–î–ò–û: {e}!!! –ù–ï –ü–ê–ù–ò–ö–£–ô, –°–ï–ô–ß–ê–° –ü–û–ß–ò–ù–ò–ú!!! ‚ùå")
            self.reconnect_attempts += 1
            if self.reconnect_attempts < self.max_reconnect_attempts:
                await asyncio.sleep(2)
                return await self.play_default_radio()
            return False
    
    async def _on_track_end(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
        try:
            if self.queue:
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                next_track = self.queue.pop(0)
                await self.play_track(next_track)
            else:
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–∞–¥–∏–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await self.play_default_radio()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
            await self.play_default_radio()
    
    async def _on_wavelink_track_end(self, payload):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –¥–ª—è Wavelink 3.x"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫ –Ω–∞—à–µ–º—É –ø–ª–µ–µ—Ä—É
            if not hasattr(payload, 'player'):
                print("‚ùå –û–®–ò–ë–ö–ê: –û–±—ä–µ–∫—Ç payload –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ç—Ä–∏–±—É—Ç player!")
                return
                
            # –í Wavelink 3.x –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ –ø–ª–µ–µ—Ä–∞
            if payload.player.guild.id != self.guild_id:
                return
                
            print(f"üéµ –°–æ–±—ã—Ç–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {self.guild_id}! –°–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(self.queue)}")
            
            if self.queue:
                # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                next_track = self.queue.pop(0)
                await self.play_track(next_track)
            else:
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–∞–¥–∏–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await self.play_default_radio()
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê –í –û–ë–†–ê–ë–û–¢–ß–ò–ö–ï –û–ö–û–ù–ß–ê–ù–ò–Ø –¢–†–ï–ö–ê WAVELINK 3.x: {e}!!! ‚ùå")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–¥–∏–æ
            await self.play_default_radio()
    
    async def _handle_playback_error(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            # –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
            await self.disconnect()
            await asyncio.sleep(2)
            success = await self.connect()
            
            if success:
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                if self.current_track:
                    if self.current_track['source'] == 'stream':
                        await self.play_default_radio()
                    else:
                        await self.play_track(self.current_track)
                else:
                    await self.play_default_radio()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")
    
    async def play_track(self, track_info):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞"""
        if not self.player or not hasattr(self.player, 'is_connected') or not self.player.is_connected():
            success = await self.connect()
            if not success:
                return False
        
        try:
            self.current_track = track_info
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–∫–∞
            self.skip_votes.clear()
            
            # –ï—Å–ª–∏ URL —É–∂–µ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—â–µ–º —á–µ—Ä–µ–∑ Wavelink
            if 'wavelink_track' in track_info:
                track = track_info['wavelink_track']
            else:
                # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ Wavelink
                if WAVELINK_MAJOR >= 3:
                    tracks = await wavelink.Playable.search(track_info['url'])
                    if not tracks:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –ø–æ URL: {track_info['url']}")
                        return False
                else:
                    tracks = await wavelink.Playable.search(track_info['url'])
                
                if isinstance(tracks, wavelink.Playlist):
                    track = tracks.tracks[0]
                elif isinstance(tracks, list) and tracks:
                    track = tracks[0]
                else:
                    track = tracks
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
            if hasattr(track, 'uri'):
                self.current_track['url'] = track.uri
            
            # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ç—Ä–µ–∫
            await self.player.play(track)
            self.is_playing = True
            self.is_paused = False
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
            await self.send_now_playing_embed()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
            return False
    
    async def add_to_queue(self, query):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å Spotify URL
            if 'spotify.com' in query:
                if not self.sp:
                    return False, "Spotify API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Spotify."
                
                track_info = await self._get_spotify_track_info(query)
                if not track_info:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ Spotify."
                
                # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ —á–µ—Ä–µ–∑ Lavalink (Wavelink)
                search_query = f"{track_info['title']} {track_info['artist']}"
                
                if WAVELINK_MAJOR >= 3:
                    tracks = await wavelink.Playable.search(search_query)
                else:
                    tracks = await wavelink.Playable.search(search_query)
                
                if not tracks:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫."
                
                if isinstance(tracks, wavelink.Playlist):
                    wavelink_track = tracks.tracks[0]
                elif isinstance(tracks, list) and tracks:
                    wavelink_track = tracks[0]
                else:
                    wavelink_track = tracks
                
                # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                track_info.update({
                    'wavelink_track': wavelink_track,
                    'url': wavelink_track.uri if hasattr(wavelink_track, 'uri') else search_query,
                    'source': 'spotify'
                })
                
                self.queue.append(track_info)
                
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if not self.is_playing:
                    await self.play_track(self.queue.pop(0))
                
                return True, f"–¢—Ä–µ–∫ {track_info['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å."
            
            elif 'youtube.com' in query or 'youtu.be' in query or 'soundcloud.com' in query:
                # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Lavalink –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ Wavelink
                if WAVELINK_MAJOR >= 3:
                    tracks = await wavelink.Playable.search(query)
                else:
                    tracks = await wavelink.Playable.search(query)
                
                if not tracks:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫."
                
                if isinstance(tracks, wavelink.Playlist):
                    # –≠—Ç–æ –ø–ª–µ–π–ª–∏—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
                    for track in tracks.tracks:
                        track_info = {
                            'title': track.title,
                            'url': track.uri if hasattr(track, 'uri') else query,
                            'thumbnail': getattr(track, 'artwork', None) or 'https://i.ytimg.com/vi/default/hqdefault.jpg',
                            'wavelink_track': track,
                            'source': 'youtube' if 'youtube' in query else 'soundcloud'
                        }
                        self.queue.append(track_info)
                    
                    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                    if not self.is_playing and self.queue:
                        await self.play_track(self.queue.pop(0))
                    
                    return True, f"–ü–ª–µ–π–ª–∏—Å—Ç —Å {len(tracks.tracks)} —Ç—Ä–µ–∫–∞–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å."
                
                elif isinstance(tracks, list) and tracks:
                    track = tracks[0]
                else:
                    track = tracks
                
                track_info = {
                    'title': track.title,
                    'url': track.uri if hasattr(track, 'uri') else query,
                    'thumbnail': getattr(track, 'artwork', None) or 'https://i.ytimg.com/vi/default/hqdefault.jpg',
                    'wavelink_track': track,
                    'source': 'youtube' if 'youtube' in query else 'soundcloud'
                }
                
                self.queue.append(track_info)
                
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if not self.is_playing:
                    await self.play_track(self.queue.pop(0))
                
                return True, f"–¢—Ä–µ–∫ {track_info['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å."
            
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                if WAVELINK_MAJOR >= 3:
                    tracks = await wavelink.Playable.search(query)
                else:
                    tracks = await wavelink.Playable.search(query)
                
                if not tracks:
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫."
                
                if isinstance(tracks, list) and tracks:
                    track = tracks[0]
                else:
                    track = tracks
                
                track_info = {
                    'title': track.title,
                    'url': track.uri if hasattr(track, 'uri') else query,
                    'thumbnail': getattr(track, 'artwork', None) or 'https://i.ytimg.com/vi/default/hqdefault.jpg',
                    'wavelink_track': track,
                    'source': 'youtube'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ YouTube
                }
                
                self.queue.append(track_info)
                
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è, –Ω–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                if not self.is_playing:
                    await self.play_track(self.queue.pop(0))
                
                return True, f"–¢—Ä–µ–∫ {track_info['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å."
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
    
    async def _get_spotify_track_info(self, spotify_url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ Spotify"""
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç—Ä–µ–∫–∞ –∏–∑ URL
            track_id = spotify_url.split('/')[-1].split('?')[0]
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ —á–µ—Ä–µ–∑ API Spotify
            track = self.sp.track(track_id)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ
            return {
                'title': track['name'],
                'artist': ', '.join([artist['name'] for artist in track['artists']]),
                'thumbnail': track['album']['images'][0]['url'] if track['album']['images'] else None,
                'duration': track['duration_ms'] / 1000  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–µ–∫—É–Ω–¥—ã
            }
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ Spotify: {e}")
            return None
    
    async def skip(self):
        """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞"""
        if self.player and self.is_playing:
            await self.player.stop()
            return True
        return False
    
    async def vote_skip(self, user_id):
        """–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞"""
        if not self.is_playing:
            return False, "–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è."
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        guild = self.bot.get_guild(self.guild_id)
        if not guild:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä."
        
        voice_channel = guild.get_channel(self.voice_channel_id)
        if not voice_channel:
            return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª."
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ (–∏—Å–∫–ª—é—á–∞—è –±–æ—Ç–æ–≤)
        members_count = sum(1 for member in voice_channel.members if not member.bot)
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ —ç—Ç–æ —Ä–∞–¥–∏–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–µ–∑ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if members_count <= 1 or self.current_track.get('source') == 'stream':
            await self.skip()
            return True, "–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω."
        
        # –ò–Ω–∞—á–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        self.skip_votes.add(user_id)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ (–ø–æ–ª–æ–≤–∏–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è –≤–≤–µ—Ä—Ö)
        required_votes = max(2, round(members_count / 2))
        self.votes_required = required_votes
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≥–æ–ª–æ—Å–æ–≤
        if len(self.skip_votes) >= required_votes:
            await self.skip()
            return True, f"–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω. –ì–æ–ª–æ—Å–æ–≤: {len(self.skip_votes)}/{required_votes}"
        else:
            return False, f"–ì–æ–ª–æ—Å–æ–≤ –∑–∞ –ø—Ä–æ–ø—É—Å–∫: {len(self.skip_votes)}/{required_votes}"
    
    async def pause(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if self.player and self.is_playing and not self.is_paused:
            await self.player.pause()
            self.is_paused = True
            return True
        return False
    
    async def resume(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if self.player and self.is_playing and self.is_paused:
            await self.player.resume()
            self.is_paused = False
            return True
        return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–µ–µ—Ä–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        if self.player:
            self.is_playing = False
            self.is_paused = False
            self.queue.clear()
            await self.player.disconnect()
            self.player = None
            return True
        return False
    
    async def send_now_playing_embed(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–±–µ–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ"""
        try:
            text_channel = self.bot.get_channel(self.text_channel_id)
            if not text_channel:
                guild = self.bot.get_guild(self.guild_id)
                if guild:
                    text_channel = guild.get_channel(self.text_channel_id)
            
            if not text_channel:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª —Å ID {self.text_channel_id}")
                return
            
            embed = discord.Embed(
                title="–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:",
                description=f"**{self.current_track['title']}**",
                color=discord.Color.blue()
            )
            
            if 'artist' in self.current_track:
                embed.add_field(name="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å", value=self.current_track['artist'], inline=True)
            
            if 'source' in self.current_track:
                if self.current_track['source'] == 'stream':
                    embed.add_field(name="–ò—Å—Ç–æ—á–Ω–∏–∫", value="üìª –†–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏—è", inline=True)
                elif self.current_track['source'] == 'spotify':
                    embed.add_field(name="–ò—Å—Ç–æ—á–Ω–∏–∫", value="Spotify", inline=True)
                elif self.current_track['source'] == 'youtube':
                    embed.add_field(name="–ò—Å—Ç–æ—á–Ω–∏–∫", value="YouTube", inline=True)
                elif self.current_track['source'] == 'soundcloud':
                    embed.add_field(name="–ò—Å—Ç–æ—á–Ω–∏–∫", value="SoundCloud", inline=True)
            
            if 'thumbnail' in self.current_track and self.current_track['thumbnail']:
                embed.set_thumbnail(url=self.current_track['thumbnail'])
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä–µ–∫–∞—Ö –≤ –æ—á–µ—Ä–µ–¥–∏
            if self.queue:
                next_tracks = "\n".join([f"{i+1}. {track['title']}" for i, track in enumerate(self.queue[:3])])
                if len(self.queue) > 3:
                    next_tracks += f"\n...–∏ –µ—â–µ {len(self.queue) - 3} —Ç—Ä–µ–∫(–æ–≤)"
                embed.add_field(name="–í –æ—á–µ—Ä–µ–¥–∏:", value=next_tracks, inline=False)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            view = MusicControlView(self)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
                async for message in text_channel.history(limit=10):
                    if message.author == self.bot.user and message.embeds:
                        await message.delete()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            
            await text_channel.send(embed=embed, view=view)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ: {e}")
    
    def get_queue(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ—á–µ—Ä–µ–¥–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        return list(self.queue)
        
    def get_current_track(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ"""
        return self.current_track
        
    def get_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–µ–µ—Ä–∞"""
        return {
            'is_playing': self.is_playing,
            'is_paused': self.is_paused,
            'current_track': self.current_track,
            'queue': self.queue,
            'connected': self.player is not None and self.player.is_connected() if self.player else False
        }

class MusicControlView(discord.ui.View):
    def __init__(self, player):
        super().__init__(timeout=None)
        self.player = player
    
    @discord.ui.button(label="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", style=discord.ButtonStyle.primary)
    async def skip_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        success, message = await self.player.vote_skip(interaction.user.id)
        await interaction.response.send_message(message, ephemeral=True)
    
    @discord.ui.button(label="‚èπÔ∏è –°—Ç–æ–ø", style=discord.ButtonStyle.danger)
    async def stop_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–∏—Ç—å –ø–ª–µ–µ—Ä
        if interaction.user.guild_permissions.administrator:
            await self.player.stop()
            await interaction.response.send_message("–ü–ª–µ–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", ephemeral=True)
        else:
            await interaction.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø–ª–µ–µ—Ä–∞", ephemeral=True)
    
    @discord.ui.button(label="‚èØÔ∏è –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def pause_resume_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        if self.player.is_paused:
            success = await self.player.resume()
            if success:
                await interaction.response.send_message("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ", ephemeral=True)
            else:
                await interaction.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ", ephemeral=True)
        else:
            success = await self.player.pause()
            if success:
                await interaction.response.send_message("–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", ephemeral=True)
            else:
                await interaction.response.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ", ephemeral=True)
    
    @discord.ui.button(label="üéµ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫", style=discord.ButtonStyle.success)
    async def add_track_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
        await interaction.response.send_modal(AddTrackModal(self.player))

class AddTrackModal(discord.ui.Modal, title="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫"):
    def __init__(self, player):
        super().__init__()
        self.player = player
    
    track_input = discord.ui.TextInput(
        label="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
        placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube/Spotify –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞...",
        required=True,
        max_length=100
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        success, message = await self.player.add_to_queue(self.track_input.value)
        await interaction.response.send_message(message, ephemeral=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ Lavalink —Å–µ—Ä–≤–µ—Ä–∞
async def download_and_start_lavalink():
    import subprocess
    import os.path
    import aiohttp
    import asyncio
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ñ–∞–π–ª Lavalink.jar
    if not os.path.isfile(LAVALINK_JAR_PATH):
        print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ Lavalink —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ {LAVALINK_DOWNLOAD_URL}...")
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(LAVALINK_DOWNLOAD_URL) as response:
                    if response.status == 200:
                        with open(LAVALINK_JAR_PATH, 'wb') as f:
                            while True:
                                chunk = await response.content.read(1024)
                                if not chunk:
                                    break
                                f.write(chunk)
                        print("Lavalink —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                    else:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Lavalink: {response.status}")
                        return False
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ Lavalink: {e}")
            return False
    
    # –°–æ–∑–¥–∞–µ–º application.yml –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not os.path.isfile("application.yml"):
        with open("application.yml", "w") as f:
            f.write(f"""server:
  port: {LAVALINK_PORT}
  address: {LAVALINK_HOST}
lavalink:
  server:
    password: "{LAVALINK_PASSWORD}"
    sources:
      youtube: true
      bandcamp: true
      soundcloud: true
      twitch: true
      vimeo: true
      http: true
      local: false
    bufferDurationMs: 400
    youtubePlaylistLoadLimit: 6
    playerUpdateInterval: 5
    youtubeSearchEnabled: true
    soundcloudSearchEnabled: true
    gc-warnings: true

logging:
  file:
    max-history: 30
    max-size: 1GB
  path: ./logs/

  level:
    root: INFO
    lavalink: INFO
""")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Lavalink —Å–µ—Ä–≤–µ—Ä
    try:
        if os.name == 'nt':  # Windows
            process = subprocess.Popen(
                ["java", "-jar", LAVALINK_JAR_PATH], 
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
        else:  # Linux/MacOS
            process = subprocess.Popen(
                ["java", "-jar", LAVALINK_JAR_PATH],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE
            )
        
        # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        await asyncio.sleep(5)
        print(f"Lavalink —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {LAVALINK_HOST}:{LAVALINK_PORT}")
        return process
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Lavalink —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return False 