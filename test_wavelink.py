import asyncio
import sys
import logging
import os
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('test_wavelink')

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Lavalink –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
LAVALINK_HOST = os.getenv('LAVALINK_HOST', 'localhost')
LAVALINK_PORT = int(os.getenv('LAVALINK_PORT', 2333))
LAVALINK_PASSWORD = os.getenv('LAVALINK_PASSWORD', 'youshallnotpass')
LAVALINK_SECURE = os.getenv('LAVALINK_SECURE', 'false').lower() == 'true'

async def test_wavelink():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Lavalink —á–µ—Ä–µ–∑ Wavelink 3.x"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º wavelink –∏ –ø–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é
        import wavelink
        import pkg_resources
        
        wavelink_version = pkg_resources.get_distribution("wavelink").version
        major_version = int(wavelink_version.split('.')[0])
        
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Wavelink –≤–µ—Ä—Å–∏–∏ {wavelink_version}")
        
        if major_version < 3:
            logger.error(f"–≠—Ç–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–±—É–µ—Ç Wavelink 3.x, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è {wavelink_version}")
            logger.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å: pip install wavelink>=3.0.0")
            return False
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ URI –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        uri = f"{'ws' if not LAVALINK_SECURE else 'wss'}://{LAVALINK_HOST}:{LAVALINK_PORT}"
        logger.info(f"–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Lavalink –ø–æ –∞–¥—Ä–µ—Å—É: {uri}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è Discord
        import discord
        from discord.ext import commands
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ—Ç-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        intents = discord.Intents.default()
        bot = commands.Bot(command_prefix='!', intents=intents)
        
        # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª –¥–ª—è Wavelink 3.x
        node = wavelink.Node(
            uri=uri,
            password=LAVALINK_PASSWORD
        )
        
        # –°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        @bot.event
        async def on_wavelink_node_ready(node: wavelink.Node):
            logger.info(f"‚úÖ –£–∑–µ–ª Wavelink –ø–æ–¥–∫–ª—é—á–µ–Ω: {node.identifier}")
            logger.info(f"‚úÖ –í–µ—Ä—Å–∏—è Lavalink: {node.version}")
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Lavalink —É—Å–ø–µ—à–Ω–æ!")
            await bot.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        
        @bot.event
        async def on_ready():
            logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user.name}")
            logger.info("–û–∂–∏–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Lavalink...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —É–∑–µ–ª
        async with bot:
            # –í Wavelink 3.x –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ Pool
            await wavelink.Pool.connect(nodes=[node], client=bot)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º –≤—ã—Ö–æ–¥–∏–º
            try:
                await asyncio.wait_for(bot.start("fake_token_for_testing"), timeout=30)
            except asyncio.TimeoutError:
                logger.error("‚ùå –¢–∞–π–º-–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Lavalink (30 —Å–µ–∫—É–Ω–¥)")
                return False
            except Exception as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—Ç discord.py, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–¥–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
                if "Improper token" in str(e) or "Cannot connect to host" in str(e):
                    logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–∫–µ–Ω–∞ Discord (–æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)")
                    return True
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    return False
    
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ discord.py –∏ wavelink>=3.0.0")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ Lavalink
async def test_lavalink_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä Lavalink"""
    import socket
    
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Lavalink —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {LAVALINK_HOST}:{LAVALINK_PORT}")
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(5)  # 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—Ä—Ç—É Lavalink
        result = sock.connect_ex((LAVALINK_HOST, LAVALINK_PORT))
        if result == 0:
            logger.info(f"‚úÖ Lavalink —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ {LAVALINK_HOST}:{LAVALINK_PORT}")
            return True
        else:
            logger.error(f"‚ùå Lavalink —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–æ–¥ –æ—à–∏–±–∫–∏: {result}")
            return False
    except socket.error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Lavalink: {e}")
        return False
    finally:
        sock.close()

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Lavalink, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
async def start_lavalink_if_needed():
    """–ó–∞–ø—É—Å–∫ Lavalink —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω"""
    if not await test_lavalink_server():
        logger.info("üöÄ –ü—ã—Ç–∞—é—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Lavalink —Å–µ—Ä–≤–µ—Ä...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Lavalink.jar
        if not os.path.exists('Lavalink.jar'):
            logger.error("‚ùå –§–∞–π–ª Lavalink.jar –Ω–µ –Ω–∞–π–¥–µ–Ω")
            logger.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Lavalink.jar —Å https://github.com/lavalink-devs/Lavalink/releases")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Java
        import subprocess
        try:
            subprocess.run(['java', '-version'], 
                          stdout=subprocess.PIPE, 
                          stderr=subprocess.PIPE, 
                          check=True)
        except (subprocess.SubprocessError, FileNotFoundError):
            logger.error("‚ùå Java –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ PATH")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Lavalink –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        import threading
        
        def run_lavalink():
            try:
                process = subprocess.Popen(
                    ['java', '-jar', 'Lavalink.jar'],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE
                )
                logger.info("üöÄ Lavalink —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: {})".format(process.pid))
                # –ù–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞, –æ–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ñ–æ–Ω–µ
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Lavalink: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π
        lavalink_thread = threading.Thread(target=run_lavalink)
        lavalink_thread.daemon = True  # –ü–æ—Ç–æ–∫ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        lavalink_thread.start()
        
        # –î–∞–µ–º –≤—Ä–µ–º—è Lavalink –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Lavalink...")
        await asyncio.sleep(10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ Lavalink
        if await test_lavalink_server():
            logger.info("‚úÖ Lavalink —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Lavalink")
            return False
    
    return True  # Lavalink —É–∂–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    logger.info("=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö LAVALINK –ß–ï–†–ï–ó WAVELINK 3.x ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    start_server = "--start-server" in sys.argv
    
    if start_server:
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        if not await start_lavalink_if_needed():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Lavalink —Å–µ—Ä–≤–µ—Ä. –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
            return
    else:
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        if not await test_lavalink_server():
            logger.warning("‚ö†Ô∏è Lavalink —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            logger.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º --start-server, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å Lavalink")
            logger.info("–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ Lavalink –≤—Ä—É—á–Ω—É—é –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º")
            return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Wavelink
    success = await test_wavelink()
    
    if success:
        logger.info("‚úÖ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù!")
    else:
        logger.error("‚ùå –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù!")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if sys.platform == 'win32':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        
    print("\n–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
    input() 